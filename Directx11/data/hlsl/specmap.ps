////////////////////////////////////////////////////////////////////////////////
// Filename: specmap.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[3] : register( t0 );
SamplerState SampleType : register( s0 );

cbuffer LightBuffer
{
	float4 diffuseColor;
	float4 specularColor;
	float specularPower;
	float3 lightDirection;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
   	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewDirection : TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 SpecMapPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
    float4 bumpMap;
    float3 bumpNormal;
    float3 lightDir;
    float lightIntensity;
    float4 color;

	float4 specularIntensity;
    float3 reflection;
    float4 specular;

	textureColor = shaderTextures[0].Sample(SampleType, input.tex);
	
    bumpMap = shaderTextures[1].Sample(SampleType, input.tex);
	// (0, 1) >> (-1, 1)
	bumpMap = (bumpMap * 2.0f) - 1.0f;

	//법선 계산
	bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) +  input.normal;
	bumpNormal = normalize(bumpNormal);

	//빛 반전
	lightDir = -lightDirection;
	// 빛의 양 계산
	lightIntensity = saturate(dot(bumpNormal, lightDir));
	//확산 색과 강도에 따라 최종 확산 색 결정
	color = saturate(diffuseColor * lightIntensity);

	color = color * textureColor;
	
	if(lightIntensity > 0.0f)
	{
		specularIntensity = shaderTextures[2].Sample(SampleType, input.tex);

		//빛의 강도, 법선 벡터 및 빛의 방향에 따라 반사벡터를 계산
		reflection = normalize(2 * lightIntensity * bumpNormal - lightDir);

		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);

		specular = specular * specularIntensity;

		color = saturate(color + specular);
	}

	return color;

}